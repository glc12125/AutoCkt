#!/usr/bin/env python

import argparse
import json
import os
import numpy as np

EXAMPLE_USAGE = """
Example Usage via RLlib CLI:
    rllib rollout /tmp/ray/checkpoint_dir/checkpoint-0 --run DQN
    --env CartPole-v0 --steps 1000000 --out rollouts.pkl

Example Usage via executable:
    ./rollout.py /tmp/ray/checkpoint_dir/checkpoint-0 --run DQN
    --env CartPole-v0 --steps 1000000 --out rollouts.pkl
"""


def create_parser(parser_creator=None):
    parser_creator = parser_creator or argparse.ArgumentParser
    parser = parser_creator(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="Get metrics given a sim_dir folder generated by Architect Explorer",
        epilog=EXAMPLE_USAGE)
    parser.add_argument(
        "simdir", type=str, help="path to the generated sim_dir.")
    #required_named = parser.add_argument_group("required named arguments")
    #required_named.add_argument(
    #    "--run",
    #    type=str,
    #    required=True,
    #    help="The algorithm or model to train. This may refer to the name "
    #    "of a built-on algorithm (e.g. RLLib's DQN or PPO), or a "
    #    "user-defined trainable function or class registered in the "
    #    "tune registry.")
    #required_named.add_argument(
    #    "--env", type=str, help="The gym environment to use.")
    #parser.add_argument(
    #    "--no-render",
    #    default=False,
    #    action="store_const",
    #    const=True,
    #    help="Surpress rendering of the environment.")
    #parser.add_argument(
    #    "--steps", default=10000, help="Number of steps to roll out.")
    #parser.add_argument("--out", default=None, help="Output filename.")
    #parser.add_argument(
    #    "--config",
    #    default="{}",
    #    type=json.loads,
    #    help="Algorithm-specific configuration (e.g. env, hyperparams). "
    #    "Surpresses loading of configuration from checkpoint.")
    #parser.add_argument(
    #    "--num_val_specs",
    #    type=int,
    #    default=50,
    #    help="Number of untrained objectives to test on")
    #parser.add_argument(
    #    "--traj_len",
    #    type=int,
    #    default=60,
    #    help="Length of each trajectory")
    return parser

def translate_result(output_path):
    result = None


    print(result)
    return result

def run(args, parser):
    sim_dir = args.simdir
    os.walk(sim_dir)
    
    return translate_result(sim_dir)

if __name__ == "__main__":
    parser = create_parser()
    args = parser.parse_args()
    run(args, parser)